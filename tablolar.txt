create table account(
	accountId int primary key,
	username varchar unique not null,
	pass varchar not null,
	userType bool not null
);

create table employer(
	employerId int primary key references account(accountId),
	employerName varchar,
	employerPhone varchar,
	employerAddress varchar,
	CONSTRAINT check_numeric_characters CHECK (employerPhone  ~ '^[0-9]+$')
);

create table employee(
	employeeId int primary key references account(accountId),
	employeeName varchar,
	employeeSurname varchar,
	employeePhone varchar,
	employeeAddress varchar,
	CONSTRAINT check_numeric_characters CHECK (employeePhone  ~ '^[0-9]+$')
);

create table employee_education(
	employeeId int references employee(employeeId),
	schoolName varchar,
	startDate date,
	endDate date,
	schoolType varchar CHECK (schoolType In ('High School','Bachelors','Masters'))
	);
	
create table employee_experience(
	employeeId int references employee(employeeId),
	startDate date,
	endDate date,
	positionName varchar,
	companyName varchar);
	
create table applications(
	employerId int references employer(employerId),
	applicationId int primary key,
	counter int,
	applicationName varchar,
	applicationDate date,
	contractType varchar CHECK (contractType In ('Part Time','Full Time','Intern')),
	positionName varchar,
	description varchar
	);

create table appliedApplications(
	employeeId int references employee(employeeId),
	applicationId int references applications(applicationId),
	status varchar CHECK (status In ('waiting','rejected','approved','canceled')),
	coverLetter varchar,
	applicationDate date
);

CREATE VIEW applicationView AS
SELECT
	aa.employeeId,
    app.applicationId,
    employer.employerName,
    app.counter,
    app.applicationName,
    app.applicationDate,
    app.contractType,
    app.positionName,
    app.description,
    aa.status,
    aa.coverLetter,
    aa.applicationDate AS appliedApplicationDate
FROM
    applications app
JOIN
    appliedApplications aa ON app.applicationId = aa.applicationId
join employer on employer.employerId = app.employerId;

CREATE VIEW applicantsView AS
SELECT
	aa.employeeId,
	aa.applicationId,
	aa.status,
	aa.coverLetter,
	aa.applicationDate,
	emp.employeeName,
	emp.employeeSurname,
	emp.employeePhone,
	emp.employeeAddress
FROM
    employee emp
JOIN
    appliedApplications aa ON emp.employeeId = aa.employeeId;


	
CREATE OR REPLACE FUNCTION createAccountFunction()
RETURNS TRIGGER AS $$
BEGIN
	case new.userType 
	   when False then insert into employer values(new.accountId,null,null,null);
	   when True then insert into employee values(new.accountId,null,null,null,null);
	 
   	end case;

   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER createAccountTrigger
AFTER INSERT ON account
FOR EACH ROW
WHEN (NEW.accountId IS NOT NULL)
EXECUTE FUNCTION createAccountFunction();


CREATE OR REPLACE FUNCTION increaseAdvertisementCounterFunction()
RETURNS TRIGGER AS $$
BEGIN
	update applications as adv set counter = counter + 1 where new.applicationId = adv.applicationId;

   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER increaseAdvertisementCounterTrigger
AFTER INSERT ON appliedApplications
FOR EACH ROW
WHEN (NEW.applicationId IS NOT NULL)
EXECUTE FUNCTION increaseAdvertisementCounterFunction();

create sequence accountIdGenerator start with 1 increment by 1 no cycle;
create sequence advertisementIdGenerator start with 1 increment by 1 no cycle;

select * from accountIdGenerator

insert into appliedApplications values(1,4,'waiting','shshsh','2020-10-12')